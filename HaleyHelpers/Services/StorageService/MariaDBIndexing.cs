using Haley.Abstractions;
using Haley.Enums;
using Haley.Models;
using Haley.Utils;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using static Haley.Internal.IndexingConstant;
using static Haley.Internal.IndexingQueries;

namespace Haley.Utils {
    public class MariaDBIndexing : IDiskStorageIndexing {
        string _masterCoreFile = "dsscore.sql";
        string _masterClientFile = "dssclient.sql";
        string _key;
        IAdapterGateway _agw;
        bool isValidated = false;
        async Task EnsureValidation() {
            if (!isValidated) await Validate();
        }


        public async Task<IFeedback> RegisterClient(ClientDirectoryInfo info) {
            if (info == null) throw new ArgumentNullException("Input client directory info cannot be null");
            info.Assert();
            //We generate the hash_guid ourselves for the client.
            await EnsureValidation();

            //Do we even need to check if the client exists? Why dont' we directly upsert the values??? We need to check, because, if we try upsert, then each time , we end up with a new autogenerated id that is not consumed. So, we might end up with all ids' consumed in years. For safer side, we use upsert, also, we check if id exists and try to update separately.

            var result = await _agw.Scalar(new AdapterArgs(_key) { Query = CLIENT.EXISTS }, (NAME, info.Name));
            var thandler = _agw.GetTransactionHandler(_key); //For both cases, update or upsert, we use inside a transaction.
            if (result != null && result is int cliId) {
                //Client exists. We just need to update.
                using (thandler.Begin()) {
                    //Register client
                    await _agw.NonQuery((new AdapterArgs(_key) { Query = CLIENT.UPDATE }).ForTransaction(thandler), (DNAME, info.DisplayName), (PATH, info.Path),(ID, cliId));
                    await _agw.NonQuery((new AdapterArgs(_key) { Query = CLIENT.UPSERTKEYS }).ForTransaction(thandler), (ID, cliId), (SIGNKEY, info.SigningKey), (ENCRYPTKEY, info.EncryptKey), (PASSWORD, info.PasswordHash));
                }
            } else {
                if (info.HashGuid == null) info.HashGuid = info.Name.CreateGUID(HashMethod.Sha256).ToString(); //No Context added. Check this one later.
                using (thandler.Begin()) {
                    //Register client
                    await _agw.NonQuery((new AdapterArgs(_key) { Query = CLIENT.UPSERT }).ForTransaction(thandler), (NAME, info.Name), (DNAME, info.DisplayName), (GUID, info.HashGuid), (PATH, info.Path));
                    result = await _agw.Scalar((new AdapterArgs(_key) { Query = CLIENT.EXISTS }).ForTransaction(thandler), (NAME, info.Name));
                    if (result != null && result is int clientId) {
                        //await _agw.Read(new AdapterArgs(_key) { Query = $@"select * from client as c where c.id = {clientId};" });
                        //Add Info
                        await _agw.NonQuery((new AdapterArgs(_key) { Query = CLIENT.UPSERTKEYS }).ForTransaction(thandler), (ID, clientId), (SIGNKEY, info.SigningKey), (ENCRYPTKEY, info.EncryptKey), (PASSWORD, info.PasswordHash));
                    }
                }
            }

            if (result != null && result is int resultId) return new Feedback(true) { Result = resultId};
            return new Feedback(false, "Unable to index the client");
        }

        public async Task<IFeedback> RegisterModule(ModuleDirectoryInfo info) {
            if (info == null) throw new ArgumentNullException("Input Module directory info cannot be null");
            info.Assert();
            //We generate the hash_guid ourselves for the client.
            await EnsureValidation();

            //Check if client exists. If not throw exeception or don't register? //Send feedback.
            var cexists = await _agw.Scalar(new AdapterArgs(_key) { Query = CLIENT.EXISTS }, (NAME, info.ClientName.ToDBName()));
            if (cexists == null || !(cexists is int clientId)) throw new ArgumentException($@"Client {info.ClientName} doesn't exist. Unable to index the module {info.Name}.");
            var mexists = await _agw.Scalar(new AdapterArgs(_key) { Query = MODULE.EXISTS }, (NAME, info.Name), (PARENT, clientId));
            if (mexists != null && mexists is long mId) {
                //Module exists. .just update it.
                await _agw.NonQuery(new AdapterArgs(_key) { Query = MODULE.UPDATE }, (DNAME, info.DisplayName), (PATH, info.Path), (ID, mId));
            } else {
                if (info.HashGuid == null) info.HashGuid = info.Name.CreateGUID(HashMethod.Sha256).ToString(); //No Context added. Check this one later.
                await _agw.NonQuery(new AdapterArgs(_key) { Query = MODULE.UPSERT }, (PARENT, clientId), (NAME, info.Name), (DNAME, info.DisplayName), (GUID, info.HashGuid), (PATH, info.Path));
            }

            mexists = await _agw.Scalar(new AdapterArgs(_key) { Query = MODULE.EXISTS }, (NAME, info.Name), (PARENT, clientId));

            if (mexists != null && mexists is long moduleId) return new Feedback(true,"Module Indexed.") {Result = moduleId};

            return new Feedback(false, "Unable to index the module");
        }

        public async Task Validate() {
            try {
                //If the service or the db doesn't exist, we throw exception or else the system would assume that nothing is wrong. If they wish , they can still turn of the indexing.
                if (!_agw.ContainsKey(_key)) throw new ArgumentException($@"Storage Indexing service validation failure.No adapter found for the given key {_key}");
                //Next step is to find out if the database exists or not? Should we even try to check if the database exists or directly run the sql script and create the database if it doesn't exists?
                var sqlFile = Path.Combine(AssemblyUtils.GetBaseDirectory(), "Resources", _masterCoreFile);
                if (!File.Exists(sqlFile)) throw new ArgumentException($@"Master sql file for creating the storage DB is not found. Please check : {_masterCoreFile}");
                //if the file exists, then run this file against the adapter gateway but ignore the db name.
                var content = File.ReadAllText(sqlFile);
                //We know that the file itself contains "dss_core" as the schema name. Replace that with new one.
                var dbname = _agw[_key].Info?.DBName ?? "mss_core"; //This is supposedly our db name.
                content = content.Replace("dss_core", dbname);
                //?? Should we run everything in one go or run as separate statements???
                await _agw.NonQuery(new AdapterArgs(_key) { ExcludeDBInConString = true, Query = content });
                isValidated = true;
            } catch (Exception ex) {
                throw ex;
            }
           
        }

        public MariaDBIndexing(IAdapterGateway agw, string key) {
            _key = key;
            _agw = agw;
        }
    }
}
